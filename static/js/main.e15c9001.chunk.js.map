{"version":3,"sources":["constants/api.ts","store/actionTypes.ts","components/User/User.tsx","store/actionCreators.ts","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","store/rootReducer.ts","utils/api.ts","utils/dataMappers.ts","store/composeEnhancer.ts","store/store.ts","App.tsx","index.tsx","constants/index.ts"],"names":["BASE_URL","POSTS_URL","USERS_URL","COMMENTS_URL","ActionTypes","User","props","user","name","address","email","className","zipcode","street","city","setPosts","value","type","SET_POSTS","payload","setLoading","SET_LOADING","setError","SET_ERROR","mapDispatchToProps","deleteComment","DELETE_COMMENT","Comment","connect","deleteCommentProps","comment","body","id","onClick","CommentList","comments","map","key","deletePost","DELETE_POST","Post","deletePostThunk","post","title","PostList","posts","initialState","isLoading","query","error","getPosts","state","getLoading","getQuery","getError","getDataFromServer","url","a","fetch","data","json","getUsers","users","getComments","getPostsWithUserAndComments","Promise","all","postsWithUserAndComments","find","person","userId","commentsByUser","filter","article","postId","enhancer","composeEnhancers","compose","applyMiddleware","thunk","store","createStore","action","SET_QUERY","item","setQuery","loadData","dispatch","filteredPosts","console","loadDataTemplate","setQueryTemplate","searchWithDelay","useCallback","debounce","searchedPosts","useMemo","includes","searchCallback","length","placeholder","onChange","event","target","toLowerCase","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e15c9001.chunk.js","sourcesContent":["export const BASE_URL = 'https://jsonplaceholder.typicode.com';\nexport const POSTS_URL = '/posts';\nexport const USERS_URL = '/users';\nexport const COMMENTS_URL = '/comments';\n","export enum ActionTypes {\n  SET_POSTS = 'SET_POSTS',\n  SET_LOADING = 'SET_LOADING',\n  DELETE_POST = 'DELETE_POST',\n  DELETE_COMMENT = 'DELETE_COMMENT',\n  SET_QUERY = 'SET_QUERY',\n  SET_ERROR = 'SET_ERROR',\n}\n","import React, { FC } from 'react';\nimport { UserInterface } from '../../constants';\n\ninterface Props {\n  user: UserInterface;\n}\n\nexport const User: FC<Props> = (props) => {\n  const { name, address, email } = props.user;\n\n  return (\n    <div className=\"user\">\n      <p>Contact info:</p>\n      <p>{`name: ${name}, email: ${email}`}</p>\n      <p>{`address: ${address.zipcode}, ${address.street}, ${address.city}`}</p>\n    </div>\n  );\n};\n","import { PostsWithUserAndComments } from '../constants';\nimport { ActionTypes } from './actionTypes';\n\nexport const setPosts = (value: PostsWithUserAndComments[]) => ({\n  type: ActionTypes.SET_POSTS,\n  payload: value,\n});\nexport const setLoading = (value: boolean) => ({\n  type: ActionTypes.SET_LOADING,\n  payload: value,\n});\nexport const deletePost = (value: number) => ({\n  type: ActionTypes.DELETE_POST,\n  payload: value,\n});\nexport const setQuery = (value: string) => ({\n  type: ActionTypes.SET_QUERY,\n  payload: value,\n});\nexport const deleteComment = (value: number) => ({\n  type: ActionTypes.DELETE_COMMENT,\n  payload: value,\n});\nexport const setError = (value: boolean) => ({\n  type: ActionTypes.SET_ERROR,\n  payload: value,\n});\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { CommentInterface } from '../../constants';\nimport { deleteComment } from '../../store/actionCreators';\n\ninterface Props {\n  comment: CommentInterface;\n  deleteComment: (value: number) => void;\n}\n\nexport const CommentTemplate: FC<Props> = (props) => {\n  const { deleteComment: deleteCommentProps } = props;\n  const {\n    name,\n    body,\n    email,\n    id,\n  } = props.comment;\n\n  return (\n    <div className=\"card text-white bg-info mb-3\">\n      <h3 className=\"card-header\">\n        {name}\n      </h3>\n      <div className=\"card-body\">\n        <blockquote className=\"blockquote mb-0\">\n          <p>\n            {body}\n          </p>\n          <footer className=\"blockquote-footer\">\n            {email}\n          </footer>\n        </blockquote>\n      </div>\n      <button\n        type=\"button\"\n        className=\"btn btn-light\"\n        onClick={() => deleteCommentProps(id)}\n      >\n        Delete comment\n      </button>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  deleteComment,\n};\n\nexport const Comment = connect(null, mapDispatchToProps)(CommentTemplate);\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\nimport { CommentInterface } from '../../constants';\n\ninterface Props {\n  comments: CommentInterface[];\n}\n\nexport const CommentList: FC<Props> = (props) => {\n  const { comments } = props;\n\n  return (\n    <div className=\"commentList\">\n      <div className=\"comments\">\n        {\n          comments.map(comment => (\n            <Comment key={comment.id} comment={comment} />\n          ))\n        }\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { PostsWithUserAndComments } from '../../constants';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\nimport { deletePost } from '../../store/actionCreators';\n\ninterface Props {\n  post: PostsWithUserAndComments;\n  deletePost: (value: number) => void;\n}\n\nexport const PostTemplate: FC<Props> = (props) => {\n  const { deletePost: deletePostThunk } = props;\n  const {\n    title,\n    body,\n    id,\n    user,\n    comments,\n  } = props.post;\n\n  return (\n    <div className=\"list__item\">\n      <div className=\"card\">\n        <h4 className=\"card-header\">{title}</h4>\n        <div className=\"card-body\">\n          <blockquote className=\"blockquote mb-0\">\n            <p>\n              {body}\n            </p>\n            <footer className=\"blockquote-footer\">\n              <User user={user} />\n            </footer>\n          </blockquote>\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => deletePostThunk(id)}\n          >\n            Delete post\n          </button>\n          <CommentList comments={comments} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = { deletePost };\n\nexport const Post = connect(null, mapDispatchToProps)(PostTemplate);\n","import React, { FC } from 'react';\nimport { PostsWithUserAndComments } from '../../constants';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  posts: PostsWithUserAndComments[];\n}\n\nexport const PostList: FC<Props> = (props) => {\n  const { posts } = props;\n\n  return (\n    <div className=\"list\">\n      {\n        posts.map((post) => <Post key={post.id} post={post} />)\n      }\n    </div>\n  );\n};\n","import { AnyAction } from 'redux';\nimport { State } from '../constants';\nimport { ActionTypes } from './actionTypes';\n\nexport const initialState: State = {\n  posts: [],\n  isLoading: false,\n  query: '',\n  error: false,\n};\n\n// selectors\nexport const getPosts = (state: State) => state.posts;\nexport const getLoading = (state: State) => state.isLoading;\nexport const getQuery = (state: State) => state.query;\nexport const getError = (state: State) => state.error;\n\nexport const reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case ActionTypes.SET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case ActionTypes.SET_QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case ActionTypes.DELETE_POST:\n      return {\n        ...state,\n        posts: [...state.posts].filter(item => item.id !== action.payload),\n      };\n\n    case ActionTypes.DELETE_COMMENT:\n      return {\n        ...state,\n        posts: [...state.posts].map(post => ({\n          ...post,\n          comments: [...post.comments].filter(item => item.id !== action.payload),\n        })),\n      };\n\n    default:\n      return state;\n  }\n};\n","import {\n  BASE_URL,\n  CommentInterface,\n  COMMENTS_URL,\n  PostInterface,\n  POSTS_URL,\n  UserInterface,\n  USERS_URL,\n} from '../constants';\n\nconst getDataFromServer = async <T>(url: string): Promise<T> => {\n  const data = await fetch(`${BASE_URL}${url}`);\n\n  return data.json();\n};\n\nexport const getUsers: () => Promise<UserInterface[]> = async () => {\n  const users = await getDataFromServer<UserInterface[]>(USERS_URL);\n\n  return users;\n};\n\nexport const getComments: () => Promise<CommentInterface[]> = async () => {\n  const comments = await getDataFromServer<CommentInterface[]>(COMMENTS_URL);\n\n  return comments;\n};\n\nexport const getPosts: () => Promise<PostInterface[]> = async () => {\n  const posts = await getDataFromServer<PostInterface[]>(POSTS_URL);\n\n  return posts;\n};\n","import {\n  CommentInterface,\n  PostInterface,\n  PostsWithUserAndComments,\n  UserInterface,\n} from '../constants';\nimport { getComments, getPosts, getUsers } from './api';\n\nexport const getPostsWithUserAndComments: () => Promise<PostsWithUserAndComments[]> = async () => {\n  const [users, comments, posts] = await Promise.all([\n    getUsers(),\n    getComments(),\n    getPosts(),\n  ]);\n\n  const postsWithUserAndComments = posts.map((post: PostInterface) => {\n    const user = users\n      .find((person: UserInterface) => person.id === post.userId) as UserInterface;\n    const commentsByUser = comments\n      .filter((article: CommentInterface) => article.postId === post.id) as CommentInterface[];\n\n    return {\n      ...post,\n      user,\n      comments: commentsByUser,\n    };\n  });\n\n  return postsWithUserAndComments;\n};\n\nexport function searchCallback(query: string) {\n  return (post: PostsWithUserAndComments) => post.title.includes(query)\n    || post.body.includes(query);\n}\n","import { compose } from 'redux';\n\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport const composeEnhancers = (\n  process.env.NODE_ENV === 'development'\n  && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n)\n  ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    trace: true,\n  })\n  : compose;\n","import { applyMiddleware, createStore, Dispatch } from 'redux';\nimport thunk from 'redux-thunk';\nimport { initialState, reducer } from './rootReducer';\nimport {\n  setError,\n  setLoading,\n  setPosts,\n} from './actionCreators';\nimport { getPostsWithUserAndComments } from '../utils';\nimport { composeEnhancers } from './composeEnhancer';\n\n// thunk\nexport const loadData = () => {\n  return async (dispatch: Dispatch) => {\n    try {\n      dispatch(setError(false));\n      dispatch(setLoading(true));\n      const filteredPosts = await getPostsWithUserAndComments();\n\n      dispatch(setPosts(filteredPosts));\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n\n      dispatch(setError(true));\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n};\n\nconst enhancer = composeEnhancers(applyMiddleware(thunk));\n\nexport const store = createStore(\n  reducer,\n  initialState,\n  enhancer,\n);\n","import React, {\n  FC,\n  useCallback,\n  useMemo,\n} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport debounce from 'lodash/debounce';\nimport { connect } from 'react-redux';\nimport {\n  PostsWithUserAndComments,\n  State,\n} from './constants';\nimport { PostList } from './components/PostList/PostList';\nimport { loadData } from './store/store';\nimport {\n  setLoading,\n  setPosts,\n  setQuery,\n} from './store/actionCreators';\nimport { searchCallback } from './utils';\nimport {\n  getError, getLoading, getPosts, getQuery,\n} from './store/rootReducer';\n\ninterface Props {\n  posts: PostsWithUserAndComments[];\n  setPosts: (value: PostsWithUserAndComments[]) => void;\n  setLoading: (value: boolean) => void;\n  isLoading: boolean;\n  setQuery: (value: string) => void;\n  query: string;\n  loadData: () => void;\n  error: boolean;\n}\n\nconst App: FC<Props> = (props) => {\n  const {\n    query,\n    posts,\n    error,\n    isLoading,\n    loadData: loadDataTemplate,\n    setQuery: setQueryTemplate,\n  } = props;\n\n  const searchWithDelay = useCallback(\n    debounce(setQueryTemplate, 1000),\n    [],\n  );\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    searchWithDelay(value.toLowerCase());\n  };\n\n  const searchedPosts = useMemo(() => posts\n    .filter(searchCallback(query)), [posts, query]);\n\n  return (\n    <div className=\"app\">\n      {!props.posts.length\n        ? (\n          <>\n            <h1>Dynamic list of posts</h1>\n            {error && (<p className=\"text-danger\">Error occured</p>)}\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={loadDataTemplate}\n            >\n              {isLoading ? 'Loading.......' : 'Start load'}\n            </button>\n          </>\n        )\n        : (\n          <>\n            <input\n              type=\"text\"\n              id=\"input\"\n              className=\"form-control\"\n              placeholder=\"type search\"\n              onChange={handleSearch}\n            />\n            <PostList posts={query ? searchedPosts : posts} />\n          </>\n        )}\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  setLoading,\n  setPosts,\n  setQuery,\n  loadData,\n};\n\nconst mapStateToProps = (state: State) => ({\n  posts: getPosts(state),\n  isLoading: getLoading(state),\n  query: getQuery(state),\n  error: getError(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","export * from './api';\nexport * from './types';\n"],"sourceRoot":""}