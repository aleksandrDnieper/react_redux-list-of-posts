{"version":3,"sources":["utils/api.ts","constants/api.ts","components/User/User.tsx","store.ts","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["getDataFromServer","url","a","fetch","data","json","getUsers","users","getComments","comments","getPosts","posts","getPostsWithUserAndComments","Promise","all","postsWithUserAndComments","map","post","user","find","person","id","userId","commentsByUser","filter","article","postId","User","className","name","email","address","zipcode","street","city","initialState","isLoading","query","error","setPosts","value","type","setLoading","setError","state","getLoading","getQuery","getError","store","createStore","action","item","applyMiddleware","thunk","mapDispatchToProps","deleteCommentThunk","dispatch","Comment","connect","props","comment","body","onClick","CommentList","key","deletePost","Post","title","PostList","setQuery","loadData","filteredPosts","console","handleStart","searchWithDelay","useCallback","debounce","searchedPosts","useMemo","includes","length","placeholder","onChange","event","target","toLowerCase","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8750e04.chunk.js","sourcesContent":["import {\n  BASE_URL,\n  USERS_URL,\n  POSTS_URL,\n  COMMENTS_URL,\n} from '../constants/api';\n\nimport {\n  UserInterface,\n  PostInterface,\n  CommentInterface,\n  PostsWithUserAndComments,\n} from '../constants/types';\n\nconst getDataFromServer = async <T>(url: string): Promise<T> => {\n  const data = await fetch(`${BASE_URL}${url}`);\n\n  return data.json();\n};\n\nconst getUsers: () => Promise<UserInterface[]> = async () => {\n  const users = await getDataFromServer<UserInterface[]>(USERS_URL);\n\n  return users;\n};\n\nconst getComments: () => Promise<CommentInterface[]> = async () => {\n  const comments = await getDataFromServer<CommentInterface[]>(COMMENTS_URL);\n\n  return comments;\n};\n\nconst getPosts: () => Promise<PostInterface[]> = async () => {\n  const posts = await getDataFromServer<PostInterface[]>(POSTS_URL);\n\n  return posts;\n};\n\nexport const getPostsWithUserAndComments: () => Promise<PostsWithUserAndComments[]> = async () => {\n  const [users, comments, posts] = await Promise.all([\n    getUsers(),\n    getComments(),\n    getPosts(),\n  ]);\n\n  const postsWithUserAndComments = posts.map((post: PostInterface) => {\n    const user = users\n      .find((person: UserInterface) => person.id === post.userId) as UserInterface;\n    const commentsByUser = comments\n      .filter((article: CommentInterface) => article.postId === post.id) as CommentInterface[];\n\n    return {\n      ...post,\n      user,\n      comments: commentsByUser,\n    };\n  });\n\n  return postsWithUserAndComments;\n};\n\nexport function searchCallback(query: string) {\n  return (post: PostsWithUserAndComments) => post.title.includes(query)\n    || post.body.includes(query);\n}\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com';\nexport const POSTS_URL = '/posts';\nexport const USERS_URL = '/users';\nexport const COMMENTS_URL = '/comments';\n","import React, { FC } from 'react';\nimport { UserInterface } from '../../constants/types';\n\ninterface Props {\n  user: UserInterface;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  return (\n    <div className=\"user\">\n      <p>Contact info:</p>\n      <p>{`name: ${user.name}, email: ${user.email}`}</p>\n      <p>{`address: ${user.address.zipcode}, ${user.address.street}, ${user.address.city}`}</p>\n    </div>\n  );\n};\n","import {\n  AnyAction, applyMiddleware, createStore, Dispatch,\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport { PostsWithUserAndComments, State } from './constants/types';\nimport { getPostsWithUserAndComments } from './utils/api';\n\nconst initialState: State = {\n  posts: [],\n  isLoading: false,\n  query: '',\n  error: false,\n};\n\n// types\nexport const SET_POSTS = 'SET_POSTS';\nexport const SET_LOADING = 'SET_LOADING';\nexport const DELETE_POST = 'DELETE_POST';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const SET_QUERY = 'SET_QUERY';\nexport const SET_ERROR = 'SET_ERROR';\n\n// actions\nexport const setPosts = (value: PostsWithUserAndComments[]) => ({ type: SET_POSTS, value });\nexport const setLoading = (value: boolean) => ({ type: SET_LOADING, value });\nexport const deletePost = (value: number) => ({ type: DELETE_POST, value });\nexport const setQuery = (value: string) => ({ type: SET_QUERY, value });\nexport const deleteComment = (value: number) => ({ type: DELETE_COMMENT, value });\nexport const setError = (value: boolean) => ({ type: SET_ERROR, value });\n\n// selectors\nexport const getPosts = (state: State) => state.posts;\nexport const getLoading = (state: State) => state.isLoading;\nexport const getQuery = (state: State) => state.query;\nexport const getError = (state: State) => state.error;\n\n// thunk\nexport const loadData = () => {\n  return async (dispatch: Dispatch) => {\n    try {\n      dispatch(setError(false));\n      dispatch(setLoading(true));\n      const filteredPosts = await getPostsWithUserAndComments();\n\n      dispatch(setPosts(filteredPosts));\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n\n      dispatch(setError(true));\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n};\n\nexport const deleteCommentThunk = (id: number) => (dispatch: Dispatch) => {\n  dispatch(deleteComment(id));\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.value,\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.value,\n      };\n\n    case SET_ERROR:\n      return {\n        ...state,\n        error: action.value,\n      };\n\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.value,\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: [...state.posts].filter(item => item.id !== action.value),\n      };\n\n    case DELETE_COMMENT:\n      return {\n        ...state,\n        posts: [...state.posts].map(post => ({\n          ...post,\n          comments: [...post.comments].filter(item => item.id !== action.value),\n        })),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(\n  reducer,\n  initialState,\n  applyMiddleware(thunk),\n);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { CommentInterface } from '../../constants/types';\nimport { deleteCommentThunk } from '../../store';\n\ninterface Props {\n  comment: CommentInterface;\n  deleteCommentThunk: (value: number) => void;\n}\n\nexport const CommentTemplate: FC<Props> = (props) => {\n  const {\n    name,\n    body,\n    email,\n    id,\n  } = props.comment;\n\n\n  return (\n    <div className=\"card text-white bg-info mb-3\">\n      <h3 className=\"card-header\">\n        {name}\n      </h3>\n      <div className=\"card-body\">\n        <blockquote className=\"blockquote mb-0\">\n          <p>\n            {body}\n          </p>\n          <footer className=\"blockquote-footer\">\n            {email}\n          </footer>\n        </blockquote>\n      </div>\n      <button\n        type=\"button\"\n        className=\"btn btn-light\"\n        onClick={() => props.deleteCommentThunk(id)}\n      >\n        Delete comment\n      </button>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  deleteCommentThunk,\n};\n\nexport const Comment = connect(null, mapDispatchToProps)(CommentTemplate);\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\nimport { CommentInterface } from '../../constants/types';\n\ninterface Props {\n  comments: CommentInterface[];\n}\n\nexport const CommentList: FC<Props> = (props) => {\n  return (\n    <div className=\"commentList\">\n      <div className=\"comments\">\n        {\n          props.comments.map(comment => (\n            <Comment key={comment.id} comment={comment} />\n          ))\n        }\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { PostsWithUserAndComments } from '../../constants/types';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\nimport { deletePost } from '../../store';\n\ninterface Props {\n  post: PostsWithUserAndComments;\n  deletePost: (value: number) => void;\n}\n\nexport const PostTemplate: FC<Props> = (props) => {\n  const {\n    title,\n    body,\n    id,\n    user,\n    comments,\n  } = props.post;\n\n  return (\n    <div className=\"list__item\">\n      <div className=\"card\">\n        <h4 className=\"card-header\">{title}</h4>\n        <div className=\"card-body\">\n\n          <blockquote className=\"blockquote mb-0\">\n            <p>\n              {body}\n            </p>\n            <footer className=\"blockquote-footer\">\n              <User user={user} />\n            </footer>\n          </blockquote>\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => props.deletePost(id)}\n          >\n            Delete post\n          </button>\n          <CommentList comments={comments} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = { deletePost };\n\nexport const Post = connect(null, mapDispatchToProps)(PostTemplate);\n","import React, { FC } from 'react';\nimport { PostsWithUserAndComments } from '../../constants/types';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  posts: PostsWithUserAndComments[];\n}\n\nexport const PostList: FC<Props> = ({ posts }) => {\n  return (\n    <div className=\"list\">\n      {\n        posts.map((post) => <Post key={post.id} post={post} />)\n      }\n    </div>\n  );\n};\n","import React, {\n  FC,\n  useCallback,\n  useMemo,\n} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport debounce from 'lodash/debounce';\nimport { connect } from 'react-redux';\nimport {\n  searchCallback,\n} from './utils/api';\nimport {\n  PostsWithUserAndComments,\n  State,\n} from './constants/types';\nimport { PostList } from './components/PostList/PostList';\nimport {\n  getLoading,\n  getPosts,\n  setLoading,\n  setPosts,\n  getQuery,\n  setQuery,\n  loadData,\n  getError,\n} from './store';\n\ninterface Props {\n  posts: PostsWithUserAndComments[];\n  setPosts: (value: PostsWithUserAndComments[]) => void;\n  setLoading: (value: boolean) => void;\n  isLoading: boolean;\n  setQuery: (value: string) => void;\n  query: string;\n  loadData: () => void;\n  error: boolean;\n}\n\nconst App: FC<Props> = (props) => {\n  const handleStart = async () => {\n    props.loadData();\n  };\n\n  const searchWithDelay = useCallback(\n    debounce(props.setQuery, 1000),\n    [],\n  );\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    searchWithDelay(value.toLowerCase());\n  };\n\n  const searchedPosts\n    = useMemo(() => props.posts\n      .filter(searchCallback(props.query)), [props.posts, props.query]);\n\n  return (\n    <div className=\"app\">\n      {!props.posts.length\n        ? (\n          <>\n            <h1>Dynamic list of posts</h1>\n            {props.error && (<p className=\"text-danger\">Error occured</p>)}\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={handleStart}\n            >\n              {props.isLoading ? 'Loading.......' : 'Start load'}\n            </button>\n          </>\n        )\n        : (\n          <>\n            <input\n              type=\"text\"\n              id=\"input\"\n              className=\"form-control\"\n              placeholder=\"type search\"\n              onChange={handleSearch}\n            />\n            <PostList posts={props.query ? searchedPosts : props.posts} />\n          </>\n        )}\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  setLoading,\n  setPosts,\n  setQuery,\n  loadData,\n};\n\nconst mapStateToProps = (state: State) => ({\n  posts: getPosts(state),\n  isLoading: getLoading(state),\n  query: getQuery(state),\n  error: getError(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}